{"version":3,"sources":["components/Operation/index.js","components/Operation/Operation.jsx","components/Result/index.js","components/Result/Result.jsx","components/Main/index.js","components/Main/Main.jsx","serviceWorker.js","index.js"],"names":["Operation","props","react_default","a","createElement","Container","maxWidth","className","Typography","component","numbers","num1","num2","result","Result","icon","check","index_es","faCheckCircle","faTimesCircle","Main","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","detect","calculeNumbers","setState","Math","floor","random","checkResult","resultInt","indexOf","state","classifier","window","ml5","soundClassifier","probabilityThreshold","modelReady","classify","gotResult","error","message","value","label","components_Result","console","log","components_Operation","PureComponent","Boolean","location","hostname","match","ReactDOM","render","components_Main","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c12329e3.chunk.js","sourcesContent":["import Operation from './Operation';\n\nexport default Operation;\n","import React from 'react';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport './Operation.scss';\n\nconst Operation = (props) => (\n  <Container maxWidth=\"md\" className=\"Operation\">\n    <Typography component=\"span\">\n      {props.numbers.num1} + {props.numbers.num2}\n      =\n      {props.result}\n    </Typography>\n  </Container>\n);\n\nexport default Operation;\n","import Result from './Result';\n\nexport default Result;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheckCircle, faTimesCircle } from '@fortawesome/free-regular-svg-icons';\nimport './Result.scss';\n\nconst Result = (props) => {\n  let icon;\n  if (props.check) {\n    icon = <FontAwesomeIcon icon={faCheckCircle} />;\n  } else {\n    icon = <FontAwesomeIcon icon={faTimesCircle} />;\n  }\n  return (\n    <div className=\"ResultWrapper\">\n      <div className=\"icon\">\n        {icon}\n      </div>\n    </div>\n  )\n};\n\nexport default Result;\n","import Main from './Main';\n\nexport default Main;\n","import React, { PureComponent } from 'react';\nimport Operation from '../Operation/index';\nimport Result from '../Result/index';\n\nclass Main extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      error: { state: false, message: '' },\n      classifier: '',\n      result: '',\n      numbers: {},\n      check: ''\n    };\n  }\n\n  componentDidMount = () => {\n    this.detect();\n    this.calculeNumbers();\n  }\n\n  calculeNumbers = () => {\n    this.setState({\n      numbers: {\n        num1: Math.floor(Math.random() * 5),\n        num2: Math.floor(Math.random() * 5)\n      }\n    });\n  }\n\n  checkResult = () => {\n    let numbersWords = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'];\n    let resultInt = numbersWords.indexOf(this.state.result);\n    if ((this.state.numbers.num1 + this.state.numbers.num2) === resultInt) {\n      this.setState({ check: true });\n    } else {\n      this.setState({ check: false });\n    }\n  }\n\n  detect = () => {\n    const options = { probabilityThreshold: 0.7 };\n    this.setState({ classifier: window.ml5.soundClassifier('SpeechCommands18w', options, this.modelReady) })\n  }\n\n  modelReady = () => {\n    this.state.classifier.classify(this.gotResult);\n  }\n\n  gotResult = (error, result) => {\n    if (error) {\n      this.setState({ error: { state: true, message: error } });\n      return;\n    }\n    let value = result[0].label;\n    this.setState({ result: value });\n    this.checkResult();\n  }\n\n  render() {\n    if (this.state.error.state) {\n      return (\n        <div>\n          <h1>Something went wrong.</h1>\n          <p>{this.state.error.message}</p>\n        </div>\n      );\n    }\n    if (this.state.check === true || this.state.check === false) {\n      return (\n        <Result check={this.state.check} />\n      );\n    }\n    return (\n      <div className=\"MainWrapper\">\n        {console.log(this.state.result)}\n        <Operation numbers={this.state.numbers} result={this.state.result} check={this.state.check} />\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Main from './components/Main/index';\nimport * as serviceWorker from './serviceWorker';\nimport 'typeface-roboto';\n\nReactDOM.render(<Main />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}