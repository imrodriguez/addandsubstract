{"version":3,"sources":["components/Operation/index.js","components/Operation/Operation.jsx","components/Main/index.js","components/Main/Main.jsx","serviceWorker.js","index.js"],"names":["Operation","props","react_default","a","createElement","Container","maxWidth","className","numbers","num1","num2","result","Main","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","detect","calculeNumbers","setState","Math","floor","random","checkResult","resultInt","indexOf","state","label","check","console","log","classifier","window","ml5","soundClassifier","probabilityThreshold","modelReady","classify","gotResult","error","message","components_Operation","PureComponent","Boolean","location","hostname","match","ReactDOM","render","components_Main","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2OAEeA,SCEG,SAACC,GAAD,OAChBC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWC,SAAS,KAAKC,UAAU,aAC9BN,EAAMO,QAAQC,KADnB,MAC4BR,EAAMO,QAAQE,KAD1C,IAGKT,EAAMU,UCNEC,cCEb,SAAAA,EAAYX,GAAO,IAAAY,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMf,KAWRmB,kBAAoB,WAClBP,EAAKQ,SACLR,EAAKS,kBAdYT,EAiBnBS,eAAiB,WACfT,EAAKU,SAAS,CACZf,QAAS,CACPC,KAAMe,KAAKC,MAAsB,EAAhBD,KAAKE,UACtBhB,KAAMc,KAAKC,MAAsB,EAAhBD,KAAKE,cArBTb,EA0BnBc,YAAc,WACZ,IACIC,EADe,CAAC,OAAQ,MAAO,MAAO,QAAS,OAAQ,OAAQ,MAAO,QAAS,QAAS,QAC/DC,QAAQhB,EAAKiB,MAAMnB,OAAOoB,OAClDlB,EAAKiB,MAAMtB,QAAQC,KAAOI,EAAKiB,MAAMtB,QAAQE,OAAUkB,EAC1Df,EAAKU,SAAS,CAAES,OAAO,IAEvBnB,EAAKU,SAAS,CAAES,OAAO,KAhCRnB,EAoCnBQ,OAAS,WACPY,QAAQC,IAAI,UAEZrB,EAAKU,SAAS,CAAEY,WAAYC,OAAOC,IAAIC,gBAAgB,oBADvC,CAAEC,qBAAsB,IAC6C1B,EAAK2B,eAvCzE3B,EA0CnB2B,WAAa,WACXP,QAAQC,IAAI,cACZrB,EAAKiB,MAAMK,WAAWM,SAAS5B,EAAK6B,YA5CnB7B,EA+CnB6B,UAAY,SAACC,EAAOhC,GACdgC,EACF9B,EAAKU,SAAS,CAAEoB,MAAO,CAAEb,OAAO,EAAMc,QAASD,MAGjD9B,EAAKU,SAAS,CAAEZ,OAAQA,EAAO,KAC/BE,EAAKc,gBAlDLd,EAAKiB,MAAQ,CACXa,MAAO,CAAEb,OAAO,EAAOc,QAAS,IAChCT,WAAY,GACZxB,OAAQ,GACRH,QAAS,GACTwB,MAAO,IARQnB,wEAyDjB,OAAIG,KAAKc,MAAMa,MAAMb,MAEjB5B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAAA,SAAIY,KAAKc,MAAMa,MAAMC,UAKzB1C,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACZS,KAAKc,MAAMnB,OACXsB,QAAQC,IAAIlB,KAAKc,MAAMnB,QACxBT,EAAAC,EAAAC,cAACyC,EAAD,CAAWrC,QAASQ,KAAKc,MAAMtB,QAASG,OAAQK,KAAKc,MAAMnB,OAAQqB,MAAOhB,KAAKc,MAAME,gBAtE1Ec,iBCSCC,QACW,cAA7BX,OAAOY,SAASC,UAEe,UAA7Bb,OAAOY,SAASC,UAEhBb,OAAOY,SAASC,SAASC,MACvB,iECZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAAUC,SAASC,eAAe,SD2H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.dd7d48d6.chunk.js","sourcesContent":["import Operation from './Operation';\n\nexport default Operation;\n","import React from 'react';\nimport Container from '@material-ui/core/Container';\nimport './Operation.scss';\n\nconst Operation = (props) => (\n  <Container maxWidth=\"md\" className=\"Operation\">\n      {props.numbers.num1} + {props.numbers.num2}\n      =\n      {props.result}\n  </Container>\n);\n\nexport default Operation;\n","import Main from './Main';\n\nexport default Main;\n","import React, { PureComponent } from 'react';\nimport Operation from '../Operation/index';\n\nclass Main extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      error: { state: false, message: '' },\n      classifier: '',\n      result: '',\n      numbers: {},\n      check: ''\n    };\n  }\n\n  componentDidMount = () => {\n    this.detect();\n    this.calculeNumbers();\n  }\n\n  calculeNumbers = () => {\n    this.setState({\n      numbers: {\n        num1: Math.floor(Math.random() * 5),\n        num2: Math.floor(Math.random() * 5)\n      }\n    });\n  }\n\n  checkResult = () => {\n    let numbersWords = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'];\n    let resultInt = numbersWords.indexOf(this.state.result.label);\n    if ((this.state.numbers.num1 + this.state.numbers.num2) === resultInt) {\n      this.setState({ check: true });\n    } else {\n      this.setState({ check: false });\n    }\n  }\n\n  detect = () => {\n    console.log('detect');\n    const options = { probabilityThreshold: 0.7 };\n    this.setState({ classifier: window.ml5.soundClassifier('SpeechCommands18w', options, this.modelReady) })\n  }\n\n  modelReady = () => {\n    console.log('modelReady');\n    this.state.classifier.classify(this.gotResult);\n  }\n\n  gotResult = (error, result) => {\n    if (error) {\n      this.setState({ error: { state: true, message: error } });\n      return;\n    }\n    this.setState({ result: result[0] });\n    this.checkResult();\n  }\n\n  render() {\n    if (this.state.error.state) {\n      return (\n        <div>\n          <h1>Something went wrong.</h1>\n          <p>{this.state.error.message}</p>\n        </div>\n      );\n    }\n    return (\n      <div className=\"MainWrapper\">\n        {this.state.result}\n        {console.log(this.state.result)}\n        <Operation numbers={this.state.numbers} result={this.state.result} check={this.state.check} />\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Main from './components/Main/index';\nimport * as serviceWorker from './serviceWorker';\nimport 'typeface-roboto';\n\nReactDOM.render(<Main />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}